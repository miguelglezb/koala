####################################################
# CONFIGURATION FILE FOR RUNNING AUTOMATICALLY     #
# THE REDUCTION OF A CALIBRATION STAR WITH PyKOALA #
####################################################

#date			20180227
#grating		580V
#pixel_size  		0.7  
#kernel_size 		1.1

# Files  ----------------------------------------------------------------------------------------------------------

#path_star	 	/DATA/KOALA/Jamila/20180227/580V/
#obj_name		Hilt600b								# Hilt600b = run_automatic_star(CONFIG_FILE_star)
#star		 	Hilt600									# Name of the star

#fits_file      	Hilt600_580V_0p7_1k40.fits						# fits file to be created with the CUBE
#response_file  	Hilt600_580V_0p7_1k40_response.dat
#telluric_file	 	Hilt600_580V_0p7_1k40_telluric_correction.dat

#rss			27feb10028red.fits
#rss			27feb10029red.fits
#rss			27feb10030red.fits

#reduced		False		# (default = False) If True be sure Python object has been created, it will not read RSS or cubing,
					# it will go directly to calibration
#read_cube		False		# (default = False) If True it reads the fits_file as a cube, creates object with name "obj_name" and jump to calibration

# RSS Section -----------------------------------------------------------------------------------------------------

#rss_clean		False			# Are the provided RSS clean? If so it just does the cubing, ignoring all parameters on this section
save_rss		True			# Select "True" for saving the obtained "CLEANED" RSS files

apply_throughput	True
#throughput_2D_file	throughput_2D_20180227_580V.fits					# Fits file with the 2D throughput, if throughput_2D given it ignores this
#throughput_2D		throughput_2D_20180227_580V						# Python variable with the 2D throughput

correct_ccd_defects 	True			# Correct for CCD defects (nan, inf, and negative values)
fix_wavelengths         True
#sol 			[] 			#
do_extinction		True
sky_method		self			# Method applied for subtracting the sky. Options: none, self, 1D, 2D, 1Dfit, selffit
						# Almost always "self" for stars
n_sky		 	100			# Number of fibres used to create a sky spectrum (default = 100)
#sky_fibres		range(0,50)
sky_fibres		fibres_best_sky_100
#win_sky		25			# Kernel size of the median filter for smoothing in fibre direction before getting sky. 
						# Must be an integer odd number. Default 151. Only for 2D sky
#sky_lines_file		sky_lines_test.dat	# File with the sky lines to me removed (if using 1Dfit or selffit)
remove_5577 		True			# Only valid for the BLUE ccd if skyline 5577 is observed

correct_negative_sky 		True		# After sky subtraction, combines lowest intensity fibres, fits continuum, and check that 
						# no negative values exists. If they are, add continuum to make continuum of lowest intensity fibres = 0

order_fit_negative_sky		7
kernel_negative_sky		51
individual_check		True
use_fit_for_negative_sky	False
force_sky_fibres_to_zero 	True
low_fibres			10
#high_fibres			20

clean_sky_residuals		True
remove_negative_median_values   True
fix_edges			False
clean_extreme_negatives 	True
percentile_min 			0.9

clean_cosmics 			False 			# (default = False) Careful here when using
width_bl			20.
kernel_median_cosmics 		 5 
cosmic_higher_than 		100. 
extra_factor 			1.

# Cubing Section -----------------------------------------------------------------------------------------------------

#do_cubing			True
#size_arcsec			[46.5,24.5]  		# Size of the cube

half_size_for_centroid  	8
#box_x				[30,40]							# RA  segment of the box used for doing the alignment, if given
#box_y				[15,24]							# Dec segment of the box used for doing the alignment, if given 
adr_index_fit			3
g2d				True
step_tracing			25
plot_tracing_maps		[3800,5500]
edgelow				5			# For tracing, in waves from w[0]
edgehigh			5			# For tracing, in waves to w[-1]

ADR		 		True
jump				-1			# For ADR, default = -1 (automatic). For quick processing, try jump = 200.


scale_cubes_using_integflux	False
#flux_ratios			[]
apply_scale			True

trim_cube 			True							# Trim the combined cube to get only valid data (default = True)
#trim_values			[2,75,2,45]						# Trim data [x0,x1,y0,y1] in spaxels. If not given, it is computed automatically
remove_spaxels_not_fully_covered	True

#delta_RA			0
#delta_DEC			0

save_aligned_cubes		False		





# Calibration  ----------------------------------------------------------------------------------------------------------

#do_calibration		True
#r_max            	5
#order_telluric	 	2

#telluric_range		[6150,6240,6410,6490] 
#telluric_range		[6720,6855,7080,7140] 
#telluric_range		[7080,7140,7500,7580]
#telluric_range		[7400,7580,7705,7850]
#telluric_range		[7850,8090,8450,8700]  

#apply_tc	 	True			# CAREFUL WITH THIS ONE! Default = False. Only use True when sure about the telluric correction. 
						#                        Otherwise CUBING must be repeated if something wrong.

#exp_time         	120			# Can be read from header
sky_annulus_low_arcsec  5.			# Minimum radius in arcsec of the annulus for the sky subtraction (default = 5.)
sky_annulus_high_arcsec 10.			# Maximum radius in arcsec of the annulus for the sky subtraction (default = 10.)

step_flux	 	10
#min_wave_flux	 	6150 			#
#max_wave_flux    	9250
#ha_width		120			# In case we need to avoid the H-alpha absorption line
#exclude_wlm		[[7200,7450],[7700,8000]]
fit_degree_flux	 	5 
#odd_number		13
#smooth			0.05
#fit_weight		0.5
#smooth_weight		0.0


# Plotting, printing -----------------------------------------------------------------------------------------------------

#valid_wave_min   		0 			# Minimum valid wavelength. By default, PyKOALA will use the mask of bad pixels in the left edge for this.
#valid_wave_max   		0			# Maximum valid wavelength. By default, PyKOALA will use the mask of bad pixels in the right edge for this.
#plot		 		True			# Plot information plots? (default = True). Setting plot=False makes PyKOALA run faster.
#plot_rss			True			# Plot rss images (default = True)
#plot_weight			False			# Plot weight maps for the cubes (default = False)
#plot_spectra			False			# Plot visualisation spectra
fig_size			12.			# Size of the figures (default = 12)
log				True			# If True and gamma = 0, use colors.LogNorm() [LOG], if False colors.Normalize() [LINEAL], 
gamma				0			# Uses colors.PowerNorm(gamma=0.25)  [sometimes gamma=0.5]  
warnings	 		True			# Print warnings (default = True)
verbose				True			# Print what is happening (default = True).  Setting verbose=False makes PyKOALA run faster.